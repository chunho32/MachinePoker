// Generated by CoffeeScript 1.12.5
(function() {
  var JsLocal, Seat, crypto, fs, request, retrieveBot, tmpDir, util,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  fs = require('fs');

  request = require('request');

  util = require('util');

  crypto = require('crypto');

  Seat = require('../seat').Seat;

  tmpDir = __dirname + "/../../tmp";

  exports.Seat = JsLocal = (function(superClass) {
    extend(JsLocal, superClass);

    function JsLocal(opts1) {
      this.opts = opts1;
      this.setupFinished = bind(this.setupFinished, this);
      this.opts || (this.opts = {});
      if (this.opts.debug) {
        this.debug = true;
      }
      this.loaded = false;
    }

    JsLocal.prototype.setup = function(module) {
      this.player = module;
      //this.playerInfo = module.info || {};
      this.name = module.info.name || "Unnamed";
      return this.setupFinished();
    };

    JsLocal.prototype.setupFinished = function(err) {
      this.loaded = true;
      return this.emit('ready');
    };

    JsLocal.prototype.update = function(game, callback) {
      var result, startTime;
      if (this.debug) {
        startTime = Date.now();
      }
      result = this.player.update(game);
      if (this.debug) {
        console.log("Execution of \"" + this.name + "\" took " + (Date.now() - startTime) + " ms.");
      }
      return setImmediate(function() {
        return callback(null, result);
      });
    };

    return JsLocal;

  })(Seat);

  exports.create = function(id, opts, callback) {
    var bot;
    if (arguments.length === 2) {
      callback = arguments[arguments.length - 1];
      opts = {};
    }
    bot = new JsLocal(opts);
    if (typeof id === 'function') {
      bot.setup(new id());
    } else {
      if (bot.debug) {
        console.log("Creating bot for - " + id);
      }
      retrieveBot(id, function(err, mod) {
        if (err) {
          throw err;
        }
        bot.setup(new mod());
        return typeof callback === "function" ? callback(null, bot) : void 0;
      });
    }
    return bot;
  };

  retrieveBot = function(id, callback) {
    var e, err, mod, name, shasum;
    mod = null;
    err = null;
    if (id.match(/^https?/)) {
      shasum = crypto.createHash('sha1');
      name = null;
      return request(id, function(err, response, body) {
        var fileName, filePath;
        fileName = shasum.update(body).digest('hex');
        filePath = tmpDir + "/" + fileName;
        if (err) {
          return typeof callback === "function" ? callback(err) : void 0;
        } else {
          return fs.writeFile(filePath, body, function(err) {
            var e;
            try {
              mod = require(filePath);
            } catch (error) {
              e = error;
              err = e;
            }
            return callback(err, mod);
          });
        }
      });
    } else {
      try {
        mod = require((process.cwd()) + "/" + id);
      } catch (error) {
        e = error;
        err = e;
      }
      return callback(err, mod);
    }
  };

}).call(this);
